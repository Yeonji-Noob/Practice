/*----------- 자식 컴포넌트 ----------- */

// typescript가 낀 자식 컴포넌트에서 할 일은 
// props 값의 type을 선언하는 것임 !!!!!
// 나는 함수형 컴포넌트로 작성할거임 ~~~

/* ------------------------------------------------ */
/* ------------------------------------------------ */

// class형 컴포넌트 양식: class로 정의하고 extend Component 라는 거도 써주고 
//render 콜백함수에서 jsx코드를 반환함

// 하 뭔 벌써부터길고복잡하네요 근데왜쓰냐면

// state랑 각종 라이프사이클이랑 메서드 등등 쓸수있어서인데
// 함수형 컴포넌트에서도 hook이란게 나와서 다 커버가 됨
// 그래서 딱히 class형을 고집할 필요가 없음ㅎㅎ

// https://chanhuiseok.github.io/posts/react-4/
// 좋은 내용 많음

/* ------------------------------------------------ */
/* ------------------------------------------------ */
// class형 컴포넌트 양식 예시
/* 
class Profile extends Component {
    render() {
        <>
            <h2>프로필</h2>
            <>
                <b>이름 : { props.name }</b>
            </>
            <>
                <b>직업 : { props.job }</b>
            </>
        </>
    }
}
 */

/* ------------------------------------------------ */
/* ------------------------------------------------ */

//props type 선언 !!!!
/* typescript 종특이라 이런거 해줘야 됨 */

interface Iprops {
    name: string,
    job: string,
}

/* ------------------------------------------------ */
/* ------------------------------------------------ */

//props의 타입 설정하기
/* typescript 종특임 */



const Profile = (props: Iprops) => {

    return (
        // 의미없는 감싸기 div 박스는 <>로도 축약이 가능함 개꿀
        <>
            <h2>프로필</h2>
            <>
                {/* props에서 name값을 가져올거임*/}
                <b>이름 : { props.name }</b>
            </>
            <br />
            <>
                {/* props에서 job값을 가져올거임*/}
                <b>직업 : { props.job }</b>
            </>
        </>
    );

}


// 이거 안쓰고 하는 방법도 있음 그거는 Counter.tsx 컴포넌트에 해놨음 미묘하게 차이가 있음
export default Profile